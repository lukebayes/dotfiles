" don't bother with vi compatibility
set nocompatible

" enable syntax highlighting
syntax enable

" Let clangd fully control code completion
let g:ycm_clangd_uses_ycmd_caching = 0
" Use installed clangd, not YCM-bundled clangd which doesn't get updates.
let g:ycm_clangd_binary_path = exepath("clangd")

set background=light
" colorscheme solarized

" configure Vundle
filetype on " without this vim emits a zero exit status, later, because of :ft off
filetype off
set rtp+=~/.vim/bundle/vundle.vim/
call vundle#begin()

" install Vundle bundles
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

call vundle#end()

" Configure Powerline
let g:Powerline_symbols = "fancy"
set fillchars+=stl:\ ,stlnc:\

" Turn off matching paren hysterical hysteresis
let g:loaded_matchparen=1

" ensure ftdetect et al work by including this after the Vundle stuff
filetype plugin indent on

set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set backupcopy=yes                                           " see :help crontab
set clipboard=unnamed                                        " yank and paste with the system clipboard
set directory-=.                                             " don't store swapfiles in the current directory
set encoding=utf-8
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set laststatus=2                                             " always show statusline
set nolist                                                     " show trailing whitespace
"set listchars=tab:▸\ ,trail:▫
set number                                                   " show line numbers
set ruler                                                    " show where you are
set scrolloff=3                                              " show context above/below cursorline
set showcmd
set smartcase                                                " case-sensitive search if any caps
set shiftwidth=2                                             " normal mode indentation commands use 2 spaces
set softtabstop=2                                            " insert mode tab and backspace use 2 spaces
set tabstop=4                                                " actual tabs occupy 8 characters
" set expandtab                                                " expand tabs to spaces
" set softtabstop=2                                            " insert mode tab and backspace use 2 spaces
" set tabstop=1                                                " actual tabs occupy 8 characters
set wildignore=log/**,CMakeFiles/**,Dist/**,Build/**,node_modules/**,target/**,tmp/**,*.rbc,lib/**
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest,list,full


" Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
  set ttymouse=xterm2
endif

" keyboard shortcuts
let mapleader = ','
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <leader>l :Align
nnoremap <leader>a :Ag<space>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
nnoremap <leader>] :TagbarToggle<CR>
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>
nnoremap <leader>g :GitGutterToggle<CR>
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" in case you forgot to sudo
cnoremap w!! %!sudo tee > /dev/null %

" plugin settings
let g:ctrlp_match_window = 'order:ttb,max:20'
let g:NERDSpaceDelims=1
let g:NERDTreeIgnore = ['^cmake_install.cmake$', '^bin$[[dir]]', '^CMakeFiles$[[dir]]']

let g:gitgutter_enabled = 0

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  " let g:ctrlp_user_command = 'ag %s -l --nocolor -g --ignore-dir third_party --ignore-dir node_modules --ignore-dir server/static""'
endif

if executable('sift')
  set wildignore+=CMakeFiles/*,*/tmp/*,*.so,*.swp,*.zip,node_modules,.git,third_party,lib,.nyc_output,Debug,Release,Dist,*.map,*.d,*.o,node_modules,.git,third_party,Dist/*,Build/*
  let g:ctrlp_match_window = 'bottom,order:ttb'
  let g:ctrlp_working_path_mode = 'ra'
  let g:ctrlp_use_caching = 1
  let g:ctrlp_user_command = ['sift %s --filename --exclude-dirs node_modules']
endif

" Automatically remove trailing whitespace
autocmd BufWritePre * %s/\s\+$//e
" fdoc is yaml
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml

" Mark lines longer than 80 chars as an error.
" autocmd BufRead,BufNewFile *.h syntax match ErrorMsg /\%>80v.\+/
" autocmd BufRead,BufNewFile *.c syntax match ErrorMsg /\%>80v.\+/
autocmd BufRead,BufNewFile *.c set tabstop=2
autocmd BufRead,BufNewFile *.c set softtabstop=2
autocmd BufRead,BufNewFile *.c set shiftwidth=2
autocmd BufRead,BufNewFile *.c set textwidth=79
autocmd BufRead,BufNewFile *.c set autoindent
autocmd BufRead,BufNewFile *.c set fileformat=unix
autocmd BufRead,BufNewFile *.c set expandtab

" md is markdown
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile *.md set spell
autocmd BufRead,BufNewFile *.md set wrap

" Python
autocmd BufRead,BufNewFile *.py set tabstop=4
autocmd BufRead,BufNewFile *.py set softtabstop=4
autocmd BufRead,BufNewFile *.py set shiftwidth=4
autocmd BufRead,BufNewFile *.py set textwidth=79
autocmd BufRead,BufNewFile *.py set expandtab
autocmd BufRead,BufNewFile *.py set autoindent
autocmd BufRead,BufNewFile *.py set fileformat=unix

let g:pymode_rope = 1

" Documentation
let g:pymode_doc = 0
" let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
" let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0
let g:pymode_rope_complete_on_dot = 0

" extra rails.vim help
autocmd User Rails silent! Rnavcommand decorator      app/decorators            -glob=**/* -suffix=_decorator.rb
autocmd User Rails silent! Rnavcommand observer       app/observers             -glob=**/* -suffix=_observer.rb
autocmd User Rails silent! Rnavcommand feature        features                  -glob=**/* -suffix=.feature
autocmd User Rails silent! Rnavcommand job            app/jobs                  -glob=**/* -suffix=_job.rb
autocmd User Rails silent! Rnavcommand mediator       app/mediators             -glob=**/* -suffix=_mediator.rb
autocmd User Rails silent! Rnavcommand stepdefinition features/step_definitions -glob=**/* -suffix=_steps.rb
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Fix Cursor in TMUX
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Don't copy the contents of an overwritten selection.
vnoremap p "_dP

" Go crazy!
if filereadable(expand("~/.vimrc.local"))
  " In your .vimrc.local, you might like:
  "
  " set autowrite
  " set nocursorline
  " set nowritebackup
  " set whichwrap+=<,>,h,l,[,] " Wrap arrow keys between lines
  "
  " autocmd! bufwritepost .vimrc source ~/.vimrc
  " noremap! jj <ESC>
  source ~/.vimrc.local
endif

let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1

